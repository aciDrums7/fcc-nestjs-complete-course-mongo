openapi: 3.0.0
paths:
  /api/v1:
    get:
      operationId: AppController-getHello
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: string
      tags:
        - app
  /api/v1/songs:
    post:
      operationId: SongsController-create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSongDto"
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FindSongDto"
      tags:
        - songs
    get:
      operationId: SongsController-findAll
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FindSongDto"
      tags:
        - songs
  /api/v1/songs/{id}:
    get:
      operationId: SongsController-findOneById
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FindSongDto"
      tags:
        - songs
    patch:
      operationId: SongsController-update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateSongDto"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FindSongDto"
      tags:
        - songs
    delete:
      operationId: SongsController-deleteOneById
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags:
        - songs
  /api/v1/albums:
    post:
      operationId: AlbumsController-create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAlbumDto"
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FindAlbumDto"
      tags:
        - albums
    get:
      operationId: AlbumsController-findAll
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FindAlbumDto"
      tags:
        - albums
  /api/v1/albums/{id}:
    get:
      operationId: AlbumsController-findOneById
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FindAlbumDto"
      tags:
        - albums
    patch:
      operationId: AlbumsController-update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateAlbumDto"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateAlbumDto"
      tags:
        - albums
    delete:
      operationId: AlbumsController-remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: string
      tags:
        - albums
info:
  title: Spotify Clone API - MongoDB
  description: freeCodeCamp - NestJS Complete Course API
  version: "1.0"
  contact: {}
tags: []
servers:
  - url: http://localhost:3001
components:
  securitySchemes:
    bearer:
      scheme: bearer
      bearerFormat: JWT
      type: http
      description: Enter JWT token
  schemas:
    CreateSongDto:
      type: object
      properties:
        title:
          type: string
        releasedDate:
          format: date-time
          type: string
        duration:
          format: date-time
          type: string
        lyrics:
          type: string
        album:
          type: string
      required:
        - title
        - releasedDate
        - duration
        - lyrics
        - album
    FindSongDto:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        releasedDate:
          format: date-time
          type: string
        duration:
          format: date-time
          type: string
        lyrics:
          type: string
      required:
        - id
        - title
        - releasedDate
        - duration
        - lyrics
    UpdateSongDto:
      type: object
      properties:
        title:
          type: string
        releasedDate:
          format: date-time
          type: string
        duration:
          format: date-time
          type: string
        lyrics:
          type: string
        album:
          type: string
    CreateAlbumDto:
      type: object
      properties:
        title:
          type: string
        songs:
          type: array
          items:
            type: string
      required:
        - title
        - songs
    Album:
      type: object
      properties:
        title:
          type: string
        songs:
          type: array
          items:
            $ref: "#/components/schemas/Song"
      required:
        - title
        - songs
    Song:
      type: object
      properties:
        title:
          type: string
        releasedDate:
          format: date-time
          type: string
        duration:
          type: string
        lyrics:
          type: string
        album:
          $ref: "#/components/schemas/Album"
      required:
        - title
        - releasedDate
        - duration
        - lyrics
        - album
    FindAlbumDto:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        songs:
          type: array
          items:
            $ref: "#/components/schemas/Song"
      required:
        - id
        - title
        - songs
    UpdateAlbumDto:
      type: object
      properties:
        title:
          type: string
        songs:
          type: array
          items:
            type: string
